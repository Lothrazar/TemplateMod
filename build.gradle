plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

import net.minecraftforge.gradle.common.tasks.SignJar
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"


version = "${mc_version}-${mod_version}"
group = 'com.lothrazar.examplemod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'examplemod'


minecraft {

    mappings channel: 'official', version: "${mc_version}"
 
 
  //  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            
            // needed for some addons such as patchouli
            //  property 'mixin.env.disableRefMap', 'true'
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
	
	
    // implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
  //  compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
  //  runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")


  //  implementation fg.deobf("curse.maven:simple-storage-network-268495:3257204")
  //  implementation fg.deobf("curse.maven:cyclic-239286:3249448")
  //  implementation fg.deobf("curse.maven:ctm-267602:3137659")
  //  implementation fg.deobf("curse.maven:storage-drawers-223852:3180569")
  //  implementation fg.deobf("curse.maven:refined-storage-243076:3157354")
  //  implementation fg.deobf("curse.maven:cucumber-272335:3187116")
  //  implementation fg.deobf("curse.maven:mystical-agriculture-246640:3152061")
    
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
}

repositories {
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = 'https://dvs1.progwml6.com/files/maven/'
  }
  maven {
    name = "mappings"
    url = 'https://dogforce-games.com/maven'
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = 'https://modmaven.k-4u.nl'
  }
  maven {
  	name = "curios"
    url = 'https://maven.theillusivec4.top/'
  }
  maven { url = 'https://maven.blamejared.com' }    
  maven { url = 'https://www.cursemaven.com'  }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            
           // ,"TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
           // "MixinConfigs": "mixins.myplugin.json",
           // "FMLCorePluginContainsFMLMod": "true"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing

//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task signJar(type: SignJar, dependsOn: jar) {

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}

task cleanJar {
  delete 'build/libs'
}
